name: Apply frontend Helm Chart to AKS

on:
  push:
    paths:
      - './kubernetes/webapp-helm-charts/envs/prod/website-chart/values.yaml'
  workflow_dispatch: # Manual trigger

jobs:
  deploy:
    name: Deploy Frontend Helm Chart
    runs-on: ubuntu-latest

    steps:
    - name: Set up kubectl
      uses: azure/k8s-set-context@v1
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_DATA }}

    - name: Install Helm
      run: |
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
        chmod 700 get_helm.sh
        ./get_helm.sh
        helm version

    # - name: Apply Helm Chart
    #   run: |
    #     helm install website ./kubernetes/webapp-helm-charts/helm-charts/website-chart --values ./kubernetes/webapp-helm-charts/envs/prod/website-chart/values.yaml --wait
    #     helm upgrade --install <release_name> <chart_directory> --namespace <namespace> -f values.yaml

    - name: LS
      run: |
        cd ./kubernetes/webapp-helm-charts/helm-charts
        ls -la

    - name: Check if Helm release exists
      id: check-helm-release
      run: |
        cd ./kubernetes/webapp-helm-charts/helm-charts
        if helm list -n default | grep -q 'website'; then
          echo "::set-output name=release_exists::true"
        else
          echo "::set-output name=release_exists::false"
        fi
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG_DATA }}

    - name: Deploy with Helm
      if: steps.check-helm-release.outputs.release_exists == 'false'
      run: |
        cd ./kubernetes/webapp-helm-charts/helm-charts
        helm install website ./website-chart --values ../envs/prod/website-chart/values.yaml --wait
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG_DATA }}

    - name: Upgrade with Helm
      if: steps.check-helm-release.outputs.release_exists == 'true'
      run: |
        cd ./kubernetes/webapp-helm-charts/helm-charts
        helm upgrade website ./website-chart --values ../envs/prod/website-chart/values.yaml --wait
      env:
        KUBECONFIG: ${{ secrets.KUBE_CONFIG_DATA }}
